# Copyright (c) 2020 Adam Souzis
# SPDX-License-Identifier: MIT
tosca_definitions_version: tosca_simple_unfurl_1_0_0 # unfurl/v1alpha1.ServiceTemplate
metadata:
  template_name: AWS implementations
  template_author: onecommons.org
  template_version: 1.0.0
imports:
  - file: ../base.yaml

topology_template:
  node_templates:
    dockerhost-bootimage:
      type: unfurl.nodes.BootImage
      directives:
        - default
      properties:
        owner: amazon
        name_regex: amzn2

    aws_metadata:
      type: unfurl.nodes.AWSMetadata
      directives:
        - default

node_types:
  unfurl.nodes.AWSMetadata:
    derived_from: tosca.nodes.Root
    attributes:
      machine_types:
        type: map
    interfaces:
      Standard:
        configure:
          implementation: helpers.py#MetadataConfigurator

  unfurl.nodes.BootImage:
    derived_from: unfurl.nodes.BootImageAbstract
    properties:
      owner:
        type: string
      architecture:
        type: string
        default: x86_64
      virtualization_type:
        type: string
        default: hvm
      name_regex:
        type: string
    interfaces:
      Standard:
        configure:
          implementation: Terraform
          inputs:
            main:
              eval:
                template: |
                  terraform {
                    required_providers {
                      aws = {
                        source  = "hashicorp/aws"
                        version = "~> 3.2"
                      }
                    }
                  }

                  provider "aws" {
                    {% set endpoints = "$connections::AWSAccount::endpoints" | eval %}
                    {%if endpoints %}
                      skip_credentials_validation = true
                      skip_metadata_api_check     = true
                      skip_requesting_account_id  = true
                      s3_force_path_style         = true

                      endpoints  {
                        {% for key,value in endpoints.items() %}
                        {{ key }} = "{{ value }}"
                        {% endfor %}
                      }
                    {%endif%}
                  }

                  data "aws_ami" "service_ami" {
                    most_recent = true
                    name_regex  = "{{ SELF.name_regex }}"
                    filter {
                      name   = "architecture"
                      values = [ "{{ SELF.architecture }}" ]
                    }
                    filter {
                      name   = "virtualization-type"
                      values = [ "{{ SELF.virtualization_type }}" ]
                    }
                    owners = [ "{{ SELF.owner }}" ]
                  }

                  output "boot_image" {
                    value = data.aws_ami.service_ami.id
                  }
            resultTemplate:
              attributes:
                boot_image: "{{ outputs.boot_image }}"

  unfurl.nodes.Compute:
    derived_from: unfurl.nodes.ComputeAbstract
    properties:
      machine_type:
        type: string
        default:
          eval:
            python: '{{ "helpers.py#choose_machine_type" | abspath("cloud") }}'
            args:
              machine_types: '{{ NODES.aws_metadata.machine_types }}'
    interfaces:
      defaults:
        implementation: Terraform
        inputs:
          tfvars:
            ami: "{{ SELF.boot_image }}"
            user_data: "{{ SELF.user_data }}"
          main: |
            terraform {
              required_providers {
                aws = {
                  source  = "hashicorp/aws"
                  version = "~> 3.2"
                }
              }
            }

            provider "aws" {
                {% set endpoints = "$connections::AWSAccount::endpoints" | eval %}
                {%if endpoints %}
                  skip_credentials_validation = true
                  skip_metadata_api_check     = true
                  skip_requesting_account_id  = true
                  s3_force_path_style         = true

                endpoints  {
                  {% for key,value in endpoints.items() %}
                  {{ key }} = "{{ value }}"
                  {% endfor %}
                }
                {%endif%}
            }

            resource "aws_instance" "app" {
              ami             = var.ami
              instance_type   = "{{ SELF.machine_type }}"
              security_groups = [aws_security_group.app.name]

              tags = {
                Name = "app"
              }

              {% if SELF.user_data %}
              user_data = var.user_data
              {% endif %}

              root_block_device {
                volume_size = {{ '.capabilities::disk_size' | eval | human_to_bytes | human_readable(unit="G") | regex_replace('[^\d.]') }}
              }
            }

            /* Firewall ----------------------------------------------------------------- */

            resource "aws_security_group" "app" {
              name = "allow_app"

              ingress {
                description = "app"
                from_port   = {{ SELF.portspec.source }}
                to_port     = {{ SELF.portspec.target or SELF.portspec.source }}
                protocol    =  "{{ SELF.portspec.protocol or 'tcp' }}"
                cidr_blocks = ["0.0.0.0/0"]
              }

              egress {
                from_port   = 0
                to_port     = 0
                protocol    = "-1"
                cidr_blocks = ["0.0.0.0/0"]
              }
            }

            variable "user_data" {
              type        = string
              default     = ""
            }

            variable "ami" {
              type        = string
            }
      Standard:
        operations:
          delete:
          create:
            inputs:
              resultTemplate:
                attributes:
                  id: '{{ resources[0].instances[0].attributes.id }}'
                  private_address: '{{ resources[0].instances[0].attributes.private_ip }}'
                  public_address: '{{ resources[0].instances[0].attributes.public_ip }}'
      Install:
        operations:
          check:
