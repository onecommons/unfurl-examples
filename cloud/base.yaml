# Copyright (c) 2020 Adam Souzis
# SPDX-License-Identifier: MIT
tosca_definitions_version: tosca_simple_unfurl_1_0_0
metadata:
  template_name: Generic cloud provider implementations
  template_author: onecommons.org
  template_version: 1.0.0

repositories:
  terraform-cloudinit-container-server:
    url: https://github.com/christippett/terraform-cloudinit-container-server.git

relationship_types:
  unfurl.relationships.ConfiguredBy:
    derived_from: tosca.relationships.Root
    valid_target_types: [unfurl.capabilities.Configuration]

capability_types:
  unfurl.capabilities.Configuration:
    derived_from: tosca.capabilities.Root

node_types:
  unfurl.nodes.Configuration:
    derived_from: tosca.nodes.Root
    capabilities:
      configuredBy:
        type: unfurl.capabilities.Configuration

  unfurl.nodes.ComputeAbstract:
    derived_from: tosca.nodes.Compute
    properties:
      boot_image:
        type: string
        default:
          eval: .::.requirements::[.name=configuredBy]::.target::boot_image
      machine_type:
        type: string
        default:
          eval: .::.requirements::[.name=configuredBy]::.target::machine_type
      user_data:
        type: string
        default:
          eval: .::.requirements::[.name=configuredBy]::.target::user_data
      portspec:
        type: tosca.datatypes.network.PortSpec
        default:
          eval: .::.requirements::[.name=configuredBy]::.target::portspec
      # name, zone, machine_type, tags, network
    requirements:
      - configuredBy:
          relationship: unfurl.relationships.ConfiguredBy
          node: unfurl.nodes.Configuration
          occurrences: [0, UNBOUNDED]

  unfurl.nodes.DockerHost:
    derived_from: unfurl.nodes.Configuration
    properties:
      portspec:
        type: tosca.datatypes.network.PortSpec
        required: false
      files:
        type: list
        entry_schema:
          type: map
        default: []
      env:
        type: map
        entry_schema:
          type: string
        default: {}

  unfurl.nodes.BootImageAbstract:
    derived_from: unfurl.nodes.Configuration
    attributes:
      boot_image:
        type: string

  unfurl.nodes.DockerComputeHost:
    derived_from: unfurl.nodes.DockerHost
    description: Given a docker-compose.yaml file create a cloudinit file
    properties:
      boot_image:
        type: string
        default:
          eval: ::dockerhost-bootimage::boot_image
    attributes:
      user_data:
        type: string
    interfaces:
      Standard:
        operations:
          configure:
            implementation: Terraform
            outputs:
              cloud_config:
            inputs:
              resultTemplate:
                attributes:
                  user_data: "{{ outputs.cloud_config }}"
              tfvars:
                files: "{{ SELF.files }}"
                env: "{{ SELF.env }}"
                email: "{{ SELF.email }}"
                domain: "{{ SELF.domain }}"
                # letsencrypt_staging: true
                container:
                  image:
                    eval: .::image
              main:
                eval:
                  get_dir: terraform-cloudinit-container-server
# XXX use this for ssh endpoints and storage
# annotations:
#     unfurl:ComputeAbstract[configuredBy]:
#       capabilities:
#         endpoint:
#           port:
#             eval: .requirements::configuredBy::portspec::source
#           protocol:
#             eval: .requirements::configuredBy::portspec::protocol
