# Copyright (c) 2020 Adam Souzis
# SPDX-License-Identifier: MIT
tosca_definitions_version: tosca_simple_unfurl_1_0_0 # unfurl/v1alpha1.ServiceTemplate
metadata:
  template_name: Google Cloud Platform implementations
  template_author: onecommons.org
  template_version: 1.0.0
imports:
  - file: ../base.yaml
  - repository: unfurl
    file: tosca_plugins/artifacts.yaml

topology_template:
  node_templates:
    gcp_artifacts:
      type: unfurl.nodes.LocalRepository
      directives:
        - default # we need this so that this node template is imported
      artifacts:
        google-cloud-compute:
          type: artifact.PythonPackage
          file: google-cloud-compute
          # properties:
          #   version: XXX

    dockerhost-bootimage:
      type: unfurl.nodes.BootImage
      directives:
        - default
      properties:
        project: cos-cloud
        family: cos-85-lts
    gcp_metadata:
      type: tosca.nodes.Root
      directives:
        - default
      interfaces:
        Standard:
          create:
            implementation:
              primary: helpers.py#MetadataConfigurator
              dependencies:
                - google-cloud-compute

node_types:
  unfurl.nodes.BootImage:
    derived_from: unfurl.nodes.BootImageAbstract
    properties:
      project:
        type: string
      family:
        type: string
    interfaces:
      Standard:
        configure:
          implementation: Terraform
          inputs:
            main:
              eval:
                template: |
                  provider "google" {}

                  provider "google-beta" {}

                  data "google_compute_image" "cos" {
                    project = "cos-cloud"
                    family  = "cos-85-lts"
                  }

                  output "boot_image" {
                    value = data.google_compute_image.cos.self_link
                  }
            resultTemplate:
              attributes:
                boot_image: "{{ outputs.boot_image }}"

  unfurl.nodes.Compute:
    derived_from: unfurl.nodes.ComputeAbstract
    properties:
      machine_type:
        type: string
        default:
          eval:
            python: "helpers.py#choose_machine_type"
            args:
              machine_types: '{{ NODES.gcp_metadata.machine_types }}'
    interfaces:
      defaults:
        implementation: Terraform
        inputs:
          tfvars:
            user_data: "{{ SELF.user_data }}"
          main: |
            provider "google" {
            }

            provider "google-beta" {
            }

            # https://registry.terraform.io/providers/hashicorp/google/latest/docs/resources/compute_instance
            resource "google_compute_instance" "app" {
              name         = "app"
              machine_type = "{{ SELF.machine_type }}"
              tags         = [ "app", "ssh" ]

              metadata = {
                  {% if SELF.user_data %}
                  user-data = var.user_data
                  {% endif %}
              }

              boot_disk {
                initialize_params {
                  image = "{{ SELF.boot_image }}"
                  size = {{ '.capabilities::disk_size' | eval | human_to_bytes | human_readable(unit="G") | regex_replace('[^\d.]') }}
                }
              }

              network_interface {
                network = var.network

                access_config {
                  // Ephemeral IP
                }
              }
            }

            resource "google_compute_firewall" "app" {
              name    = "app-firewall"
              network = var.network

              allow {
                protocol = "icmp"
              }

              allow {
                protocol    =  "{{ SELF.portspec.protocol or 'tcp' }}"
                ports    = [ {{ SELF.portspec.source }} ]
              }

              target_tags = ["app"]
            }

            variable "user_data" {
              type        = string
              default     = ""
            }

            variable "network" {
              type        = string
              default     = "default"
            }

            output "instance" {
              sensitive = true
              value = google_compute_instance.app
            }

      Standard:
        operations:
          delete:
          create:
            inputs:
              resultTemplate:
                attributes:
                  public_address: "{{ outputs.instance.network_interface[0].access_config[0].nat_ip }}"
                  private_address: "{{ outputs.instance.network_interface[0].network_ip }}"
                  # id format: projects/{{project}}/zones/{{zone}}/instances/{{name}}
                  id:  "{{ outputs.instance.id }}"
                  name: "{{ outputs.instance.id | basename }}"
      Install:
        operations:
          check:
